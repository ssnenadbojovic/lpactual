import { Purify } from "typelevel-ts";
export declare type Validator<T> = (value: T) => boolean;
export declare type ObjectSchema<T extends object> = {
    [key in Purify<keyof T>]: Validator<T[key]>;
};
export declare function object<T extends object>(schema: ObjectSchema<T>): Validator<T>;
export declare function objectMapOf<T>(fn: Validator<T>): Validator<{
    [key: string]: T;
}>;
export declare function string(): Validator<string>;
export declare function number(): Validator<number>;
export declare function gt(n: number): Validator<number>;
export declare function gte(n: number): Validator<number>;
export declare function lt(n: number): Validator<number>;
export declare function lte(n: number): Validator<number>;
export declare function optional<T>(fn: Validator<T & {}>): Validator<T | undefined>;
export declare function maxLen(len: number): Validator<Array<any>>;
export declare function array<T>(fn: Validator<T>): Validator<Array<T>>;
export declare function boolean(): Validator<boolean>;
export declare function any(): Validator<any>;
export declare function equal<T>(option: T): Validator<T>;
export declare function some<T>(...options: Array<T>): Validator<T>;
export declare function every<T>(...options: Array<T>): Validator<T>;
export declare function or<X, Y>(x: Validator<X>, y: Validator<Y>): Validator<X | Y>;
export declare function and<X>(x: Validator<X>, y: Validator<X>): Validator<X>;
